// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mserviceinventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MServiceInventoryClient is the client API for MServiceInventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MServiceInventoryClient interface {
	// create new facility
	CreateFacility(ctx context.Context, in *CreateFacilityRequest, opts ...grpc.CallOption) (*CreateFacilityResponse, error)
	// update an existing facility
	UpdateFacility(ctx context.Context, in *UpdateFacilityRequest, opts ...grpc.CallOption) (*UpdateFacilityResponse, error)
	// delete an existing facility
	DeleteFacility(ctx context.Context, in *DeleteFacilityRequest, opts ...grpc.CallOption) (*DeleteFacilityResponse, error)
	// get a facility by id
	GetFacility(ctx context.Context, in *GetFacilityRequest, opts ...grpc.CallOption) (*GetFacilityResponse, error)
	// get all facilities by mservice_id
	GetFacilities(ctx context.Context, in *GetFacilitiesRequest, opts ...grpc.CallOption) (*GetFacilitiesResponse, error)
	// get a facility wrapper by id
	GetFacilityWrapper(ctx context.Context, in *GetFacilityWrapperRequest, opts ...grpc.CallOption) (*GetFacilityWrapperResponse, error)
	// create new subarea type
	CreateSubareaType(ctx context.Context, in *CreateSubareaTypeRequest, opts ...grpc.CallOption) (*CreateSubareaTypeResponse, error)
	// update an existing subarea type
	UpdateSubareaType(ctx context.Context, in *UpdateSubareaTypeRequest, opts ...grpc.CallOption) (*UpdateSubareaTypeResponse, error)
	// delete an existing subarea type
	DeleteSubareaType(ctx context.Context, in *DeleteSubareaTypeRequest, opts ...grpc.CallOption) (*DeleteSubareaTypeResponse, error)
	// get a subarea type by id
	GetSubareaType(ctx context.Context, in *GetSubareaTypeRequest, opts ...grpc.CallOption) (*GetSubareaTypeResponse, error)
	// get  subarea types by mservice_id
	GetSubareaTypes(ctx context.Context, in *GetSubareaTypesRequest, opts ...grpc.CallOption) (*GetSubareaTypesResponse, error)
	// create new item type
	CreateItemType(ctx context.Context, in *CreateItemTypeRequest, opts ...grpc.CallOption) (*CreateItemTypeResponse, error)
	// update an existing item type
	UpdateItemType(ctx context.Context, in *UpdateItemTypeRequest, opts ...grpc.CallOption) (*UpdateItemTypeResponse, error)
	// delete an existing item type
	DeleteItemType(ctx context.Context, in *DeleteItemTypeRequest, opts ...grpc.CallOption) (*DeleteItemTypeResponse, error)
	// get a item type by id
	GetItemType(ctx context.Context, in *GetItemTypeRequest, opts ...grpc.CallOption) (*GetItemTypeResponse, error)
	// get  item types by mservice_id
	GetItemTypes(ctx context.Context, in *GetItemTypesRequest, opts ...grpc.CallOption) (*GetItemTypesResponse, error)
	// create a new subarea
	CreateSubarea(ctx context.Context, in *CreateSubareaRequest, opts ...grpc.CallOption) (*CreateSubareaResponse, error)
	// update an existing subarea
	UpdateSubarea(ctx context.Context, in *UpdateSubareaRequest, opts ...grpc.CallOption) (*UpdateSubareaResponse, error)
	// delete an existing subarea
	DeleteSubarea(ctx context.Context, in *DeleteSubareaRequest, opts ...grpc.CallOption) (*DeleteSubareaResponse, error)
	// get a subarea by id
	GetSubarea(ctx context.Context, in *GetSubareaRequest, opts ...grpc.CallOption) (*GetSubareaResponse, error)
	// get all subareas by facility_id
	GetSubareas(ctx context.Context, in *GetSubareasRequest, opts ...grpc.CallOption) (*GetSubareasResponse, error)
	// create a new product
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	// update an existing product
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	// delete an existing product
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	// get a product by id
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	// get all products by mservice_id
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	// create a new inventory item
	CreateInventoryItem(ctx context.Context, in *CreateInventoryItemRequest, opts ...grpc.CallOption) (*CreateInventoryItemResponse, error)
	// update an existing inventory item
	UpdateInventoryItem(ctx context.Context, in *UpdateInventoryItemRequest, opts ...grpc.CallOption) (*UpdateInventoryItemResponse, error)
	// delete an existing inventory item
	DeleteInventoryItem(ctx context.Context, in *DeleteInventoryItemRequest, opts ...grpc.CallOption) (*DeleteInventoryItemResponse, error)
	// get an inventory item by id
	GetInventoryItem(ctx context.Context, in *GetInventoryItemRequest, opts ...grpc.CallOption) (*GetInventoryItemResponse, error)
	// get all inventory items for a product id
	GetInventoryItemsByProduct(ctx context.Context, in *GetInventoryItemsByProductRequest, opts ...grpc.CallOption) (*GetInventoryItemsByProductResponse, error)
	// get all inventory items in a subarea
	GetInventoryItemsBySubarea(ctx context.Context, in *GetInventoryItemsBySubareaRequest, opts ...grpc.CallOption) (*GetInventoryItemsBySubareaResponse, error)
	// get all inventory items in a facility
	GetInventoryItemsByFacility(ctx context.Context, in *GetInventoryItemsByFacilityRequest, opts ...grpc.CallOption) (*GetInventoryItemsByFacilityResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
	// create an entity schema
	CreateEntitySchema(ctx context.Context, in *CreateEntitySchemaRequest, opts ...grpc.CallOption) (*CreateEntitySchemaResponse, error)
	// update an entity schema
	UpdateEntitySchema(ctx context.Context, in *UpdateEntitySchemaRequest, opts ...grpc.CallOption) (*UpdateEntitySchemaResponse, error)
	// delete an entity schema
	DeleteEntitySchema(ctx context.Context, in *DeleteEntitySchemaRequest, opts ...grpc.CallOption) (*DeleteEntitySchemaResponse, error)
	// get an entity schema by name
	GetEntitySchema(ctx context.Context, in *GetEntitySchemaRequest, opts ...grpc.CallOption) (*GetEntitySchemaResponse, error)
	// get all entity schemas for account
	GetEntitySchemas(ctx context.Context, in *GetEntitySchemasRequest, opts ...grpc.CallOption) (*GetEntitySchemasResponse, error)
}

type mServiceInventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewMServiceInventoryClient(cc grpc.ClientConnInterface) MServiceInventoryClient {
	return &mServiceInventoryClient{cc}
}

func (c *mServiceInventoryClient) CreateFacility(ctx context.Context, in *CreateFacilityRequest, opts ...grpc.CallOption) (*CreateFacilityResponse, error) {
	out := new(CreateFacilityResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_facility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateFacility(ctx context.Context, in *UpdateFacilityRequest, opts ...grpc.CallOption) (*UpdateFacilityResponse, error) {
	out := new(UpdateFacilityResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_facility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteFacility(ctx context.Context, in *DeleteFacilityRequest, opts ...grpc.CallOption) (*DeleteFacilityResponse, error) {
	out := new(DeleteFacilityResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_facility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetFacility(ctx context.Context, in *GetFacilityRequest, opts ...grpc.CallOption) (*GetFacilityResponse, error) {
	out := new(GetFacilityResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_facility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetFacilities(ctx context.Context, in *GetFacilitiesRequest, opts ...grpc.CallOption) (*GetFacilitiesResponse, error) {
	out := new(GetFacilitiesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_facilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetFacilityWrapper(ctx context.Context, in *GetFacilityWrapperRequest, opts ...grpc.CallOption) (*GetFacilityWrapperResponse, error) {
	out := new(GetFacilityWrapperResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_facility_wrapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) CreateSubareaType(ctx context.Context, in *CreateSubareaTypeRequest, opts ...grpc.CallOption) (*CreateSubareaTypeResponse, error) {
	out := new(CreateSubareaTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_subarea_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateSubareaType(ctx context.Context, in *UpdateSubareaTypeRequest, opts ...grpc.CallOption) (*UpdateSubareaTypeResponse, error) {
	out := new(UpdateSubareaTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_subarea_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteSubareaType(ctx context.Context, in *DeleteSubareaTypeRequest, opts ...grpc.CallOption) (*DeleteSubareaTypeResponse, error) {
	out := new(DeleteSubareaTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_subarea_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetSubareaType(ctx context.Context, in *GetSubareaTypeRequest, opts ...grpc.CallOption) (*GetSubareaTypeResponse, error) {
	out := new(GetSubareaTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_subarea_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetSubareaTypes(ctx context.Context, in *GetSubareaTypesRequest, opts ...grpc.CallOption) (*GetSubareaTypesResponse, error) {
	out := new(GetSubareaTypesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_subarea_types", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) CreateItemType(ctx context.Context, in *CreateItemTypeRequest, opts ...grpc.CallOption) (*CreateItemTypeResponse, error) {
	out := new(CreateItemTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_item_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateItemType(ctx context.Context, in *UpdateItemTypeRequest, opts ...grpc.CallOption) (*UpdateItemTypeResponse, error) {
	out := new(UpdateItemTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_item_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteItemType(ctx context.Context, in *DeleteItemTypeRequest, opts ...grpc.CallOption) (*DeleteItemTypeResponse, error) {
	out := new(DeleteItemTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_item_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetItemType(ctx context.Context, in *GetItemTypeRequest, opts ...grpc.CallOption) (*GetItemTypeResponse, error) {
	out := new(GetItemTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_item_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetItemTypes(ctx context.Context, in *GetItemTypesRequest, opts ...grpc.CallOption) (*GetItemTypesResponse, error) {
	out := new(GetItemTypesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_item_types", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) CreateSubarea(ctx context.Context, in *CreateSubareaRequest, opts ...grpc.CallOption) (*CreateSubareaResponse, error) {
	out := new(CreateSubareaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_subarea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateSubarea(ctx context.Context, in *UpdateSubareaRequest, opts ...grpc.CallOption) (*UpdateSubareaResponse, error) {
	out := new(UpdateSubareaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_subarea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteSubarea(ctx context.Context, in *DeleteSubareaRequest, opts ...grpc.CallOption) (*DeleteSubareaResponse, error) {
	out := new(DeleteSubareaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_subarea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetSubarea(ctx context.Context, in *GetSubareaRequest, opts ...grpc.CallOption) (*GetSubareaResponse, error) {
	out := new(GetSubareaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_subarea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetSubareas(ctx context.Context, in *GetSubareasRequest, opts ...grpc.CallOption) (*GetSubareasResponse, error) {
	out := new(GetSubareasResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_subareas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_products", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) CreateInventoryItem(ctx context.Context, in *CreateInventoryItemRequest, opts ...grpc.CallOption) (*CreateInventoryItemResponse, error) {
	out := new(CreateInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_inventory_item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateInventoryItem(ctx context.Context, in *UpdateInventoryItemRequest, opts ...grpc.CallOption) (*UpdateInventoryItemResponse, error) {
	out := new(UpdateInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_inventory_item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteInventoryItem(ctx context.Context, in *DeleteInventoryItemRequest, opts ...grpc.CallOption) (*DeleteInventoryItemResponse, error) {
	out := new(DeleteInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_inventory_item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetInventoryItem(ctx context.Context, in *GetInventoryItemRequest, opts ...grpc.CallOption) (*GetInventoryItemResponse, error) {
	out := new(GetInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetInventoryItemsByProduct(ctx context.Context, in *GetInventoryItemsByProductRequest, opts ...grpc.CallOption) (*GetInventoryItemsByProductResponse, error) {
	out := new(GetInventoryItemsByProductResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_items_by_product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetInventoryItemsBySubarea(ctx context.Context, in *GetInventoryItemsBySubareaRequest, opts ...grpc.CallOption) (*GetInventoryItemsBySubareaResponse, error) {
	out := new(GetInventoryItemsBySubareaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_items_by_subarea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetInventoryItemsByFacility(ctx context.Context, in *GetInventoryItemsByFacilityRequest, opts ...grpc.CallOption) (*GetInventoryItemsByFacilityResponse, error) {
	out := new(GetInventoryItemsByFacilityResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_items_by_facility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_server_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) CreateEntitySchema(ctx context.Context, in *CreateEntitySchemaRequest, opts ...grpc.CallOption) (*CreateEntitySchemaResponse, error) {
	out := new(CreateEntitySchemaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/create_entity_schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) UpdateEntitySchema(ctx context.Context, in *UpdateEntitySchemaRequest, opts ...grpc.CallOption) (*UpdateEntitySchemaResponse, error) {
	out := new(UpdateEntitySchemaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/update_entity_schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) DeleteEntitySchema(ctx context.Context, in *DeleteEntitySchemaRequest, opts ...grpc.CallOption) (*DeleteEntitySchemaResponse, error) {
	out := new(DeleteEntitySchemaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/delete_entity_schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetEntitySchema(ctx context.Context, in *GetEntitySchemaRequest, opts ...grpc.CallOption) (*GetEntitySchemaResponse, error) {
	out := new(GetEntitySchemaResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_entity_schema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceInventoryClient) GetEntitySchemas(ctx context.Context, in *GetEntitySchemasRequest, opts ...grpc.CallOption) (*GetEntitySchemasResponse, error) {
	out := new(GetEntitySchemasResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.inventory.MServiceInventory/get_entity_schemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MServiceInventoryServer is the server API for MServiceInventory service.
// All implementations must embed UnimplementedMServiceInventoryServer
// for forward compatibility
type MServiceInventoryServer interface {
	// create new facility
	CreateFacility(context.Context, *CreateFacilityRequest) (*CreateFacilityResponse, error)
	// update an existing facility
	UpdateFacility(context.Context, *UpdateFacilityRequest) (*UpdateFacilityResponse, error)
	// delete an existing facility
	DeleteFacility(context.Context, *DeleteFacilityRequest) (*DeleteFacilityResponse, error)
	// get a facility by id
	GetFacility(context.Context, *GetFacilityRequest) (*GetFacilityResponse, error)
	// get all facilities by mservice_id
	GetFacilities(context.Context, *GetFacilitiesRequest) (*GetFacilitiesResponse, error)
	// get a facility wrapper by id
	GetFacilityWrapper(context.Context, *GetFacilityWrapperRequest) (*GetFacilityWrapperResponse, error)
	// create new subarea type
	CreateSubareaType(context.Context, *CreateSubareaTypeRequest) (*CreateSubareaTypeResponse, error)
	// update an existing subarea type
	UpdateSubareaType(context.Context, *UpdateSubareaTypeRequest) (*UpdateSubareaTypeResponse, error)
	// delete an existing subarea type
	DeleteSubareaType(context.Context, *DeleteSubareaTypeRequest) (*DeleteSubareaTypeResponse, error)
	// get a subarea type by id
	GetSubareaType(context.Context, *GetSubareaTypeRequest) (*GetSubareaTypeResponse, error)
	// get  subarea types by mservice_id
	GetSubareaTypes(context.Context, *GetSubareaTypesRequest) (*GetSubareaTypesResponse, error)
	// create new item type
	CreateItemType(context.Context, *CreateItemTypeRequest) (*CreateItemTypeResponse, error)
	// update an existing item type
	UpdateItemType(context.Context, *UpdateItemTypeRequest) (*UpdateItemTypeResponse, error)
	// delete an existing item type
	DeleteItemType(context.Context, *DeleteItemTypeRequest) (*DeleteItemTypeResponse, error)
	// get a item type by id
	GetItemType(context.Context, *GetItemTypeRequest) (*GetItemTypeResponse, error)
	// get  item types by mservice_id
	GetItemTypes(context.Context, *GetItemTypesRequest) (*GetItemTypesResponse, error)
	// create a new subarea
	CreateSubarea(context.Context, *CreateSubareaRequest) (*CreateSubareaResponse, error)
	// update an existing subarea
	UpdateSubarea(context.Context, *UpdateSubareaRequest) (*UpdateSubareaResponse, error)
	// delete an existing subarea
	DeleteSubarea(context.Context, *DeleteSubareaRequest) (*DeleteSubareaResponse, error)
	// get a subarea by id
	GetSubarea(context.Context, *GetSubareaRequest) (*GetSubareaResponse, error)
	// get all subareas by facility_id
	GetSubareas(context.Context, *GetSubareasRequest) (*GetSubareasResponse, error)
	// create a new product
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	// update an existing product
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	// delete an existing product
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	// get a product by id
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	// get all products by mservice_id
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	// create a new inventory item
	CreateInventoryItem(context.Context, *CreateInventoryItemRequest) (*CreateInventoryItemResponse, error)
	// update an existing inventory item
	UpdateInventoryItem(context.Context, *UpdateInventoryItemRequest) (*UpdateInventoryItemResponse, error)
	// delete an existing inventory item
	DeleteInventoryItem(context.Context, *DeleteInventoryItemRequest) (*DeleteInventoryItemResponse, error)
	// get an inventory item by id
	GetInventoryItem(context.Context, *GetInventoryItemRequest) (*GetInventoryItemResponse, error)
	// get all inventory items for a product id
	GetInventoryItemsByProduct(context.Context, *GetInventoryItemsByProductRequest) (*GetInventoryItemsByProductResponse, error)
	// get all inventory items in a subarea
	GetInventoryItemsBySubarea(context.Context, *GetInventoryItemsBySubareaRequest) (*GetInventoryItemsBySubareaResponse, error)
	// get all inventory items in a facility
	GetInventoryItemsByFacility(context.Context, *GetInventoryItemsByFacilityRequest) (*GetInventoryItemsByFacilityResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
	// create an entity schema
	CreateEntitySchema(context.Context, *CreateEntitySchemaRequest) (*CreateEntitySchemaResponse, error)
	// update an entity schema
	UpdateEntitySchema(context.Context, *UpdateEntitySchemaRequest) (*UpdateEntitySchemaResponse, error)
	// delete an entity schema
	DeleteEntitySchema(context.Context, *DeleteEntitySchemaRequest) (*DeleteEntitySchemaResponse, error)
	// get an entity schema by name
	GetEntitySchema(context.Context, *GetEntitySchemaRequest) (*GetEntitySchemaResponse, error)
	// get all entity schemas for account
	GetEntitySchemas(context.Context, *GetEntitySchemasRequest) (*GetEntitySchemasResponse, error)
	mustEmbedUnimplementedMServiceInventoryServer()
}

// UnimplementedMServiceInventoryServer must be embedded to have forward compatible implementations.
type UnimplementedMServiceInventoryServer struct {
}

func (UnimplementedMServiceInventoryServer) CreateFacility(context.Context, *CreateFacilityRequest) (*CreateFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFacility not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateFacility(context.Context, *UpdateFacilityRequest) (*UpdateFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFacility not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteFacility(context.Context, *DeleteFacilityRequest) (*DeleteFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFacility not implemented")
}
func (UnimplementedMServiceInventoryServer) GetFacility(context.Context, *GetFacilityRequest) (*GetFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacility not implemented")
}
func (UnimplementedMServiceInventoryServer) GetFacilities(context.Context, *GetFacilitiesRequest) (*GetFacilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilities not implemented")
}
func (UnimplementedMServiceInventoryServer) GetFacilityWrapper(context.Context, *GetFacilityWrapperRequest) (*GetFacilityWrapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilityWrapper not implemented")
}
func (UnimplementedMServiceInventoryServer) CreateSubareaType(context.Context, *CreateSubareaTypeRequest) (*CreateSubareaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubareaType not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateSubareaType(context.Context, *UpdateSubareaTypeRequest) (*UpdateSubareaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubareaType not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteSubareaType(context.Context, *DeleteSubareaTypeRequest) (*DeleteSubareaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubareaType not implemented")
}
func (UnimplementedMServiceInventoryServer) GetSubareaType(context.Context, *GetSubareaTypeRequest) (*GetSubareaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubareaType not implemented")
}
func (UnimplementedMServiceInventoryServer) GetSubareaTypes(context.Context, *GetSubareaTypesRequest) (*GetSubareaTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubareaTypes not implemented")
}
func (UnimplementedMServiceInventoryServer) CreateItemType(context.Context, *CreateItemTypeRequest) (*CreateItemTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemType not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateItemType(context.Context, *UpdateItemTypeRequest) (*UpdateItemTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemType not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteItemType(context.Context, *DeleteItemTypeRequest) (*DeleteItemTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemType not implemented")
}
func (UnimplementedMServiceInventoryServer) GetItemType(context.Context, *GetItemTypeRequest) (*GetItemTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemType not implemented")
}
func (UnimplementedMServiceInventoryServer) GetItemTypes(context.Context, *GetItemTypesRequest) (*GetItemTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemTypes not implemented")
}
func (UnimplementedMServiceInventoryServer) CreateSubarea(context.Context, *CreateSubareaRequest) (*CreateSubareaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubarea not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateSubarea(context.Context, *UpdateSubareaRequest) (*UpdateSubareaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubarea not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteSubarea(context.Context, *DeleteSubareaRequest) (*DeleteSubareaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubarea not implemented")
}
func (UnimplementedMServiceInventoryServer) GetSubarea(context.Context, *GetSubareaRequest) (*GetSubareaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubarea not implemented")
}
func (UnimplementedMServiceInventoryServer) GetSubareas(context.Context, *GetSubareasRequest) (*GetSubareasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubareas not implemented")
}
func (UnimplementedMServiceInventoryServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedMServiceInventoryServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedMServiceInventoryServer) GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedMServiceInventoryServer) CreateInventoryItem(context.Context, *CreateInventoryItemRequest) (*CreateInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventoryItem not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateInventoryItem(context.Context, *UpdateInventoryItemRequest) (*UpdateInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventoryItem not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteInventoryItem(context.Context, *DeleteInventoryItemRequest) (*DeleteInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInventoryItem not implemented")
}
func (UnimplementedMServiceInventoryServer) GetInventoryItem(context.Context, *GetInventoryItemRequest) (*GetInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryItem not implemented")
}
func (UnimplementedMServiceInventoryServer) GetInventoryItemsByProduct(context.Context, *GetInventoryItemsByProductRequest) (*GetInventoryItemsByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryItemsByProduct not implemented")
}
func (UnimplementedMServiceInventoryServer) GetInventoryItemsBySubarea(context.Context, *GetInventoryItemsBySubareaRequest) (*GetInventoryItemsBySubareaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryItemsBySubarea not implemented")
}
func (UnimplementedMServiceInventoryServer) GetInventoryItemsByFacility(context.Context, *GetInventoryItemsByFacilityRequest) (*GetInventoryItemsByFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryItemsByFacility not implemented")
}
func (UnimplementedMServiceInventoryServer) GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerVersion not implemented")
}
func (UnimplementedMServiceInventoryServer) CreateEntitySchema(context.Context, *CreateEntitySchemaRequest) (*CreateEntitySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntitySchema not implemented")
}
func (UnimplementedMServiceInventoryServer) UpdateEntitySchema(context.Context, *UpdateEntitySchemaRequest) (*UpdateEntitySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntitySchema not implemented")
}
func (UnimplementedMServiceInventoryServer) DeleteEntitySchema(context.Context, *DeleteEntitySchemaRequest) (*DeleteEntitySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntitySchema not implemented")
}
func (UnimplementedMServiceInventoryServer) GetEntitySchema(context.Context, *GetEntitySchemaRequest) (*GetEntitySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitySchema not implemented")
}
func (UnimplementedMServiceInventoryServer) GetEntitySchemas(context.Context, *GetEntitySchemasRequest) (*GetEntitySchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitySchemas not implemented")
}
func (UnimplementedMServiceInventoryServer) mustEmbedUnimplementedMServiceInventoryServer() {}

// UnsafeMServiceInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MServiceInventoryServer will
// result in compilation errors.
type UnsafeMServiceInventoryServer interface {
	mustEmbedUnimplementedMServiceInventoryServer()
}

func RegisterMServiceInventoryServer(s grpc.ServiceRegistrar, srv MServiceInventoryServer) {
	s.RegisterService(&MServiceInventory_ServiceDesc, srv)
}

func _MServiceInventory_CreateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_facility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateFacility(ctx, req.(*CreateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_facility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateFacility(ctx, req.(*UpdateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_facility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteFacility(ctx, req.(*DeleteFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_facility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetFacility(ctx, req.(*GetFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_facilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetFacilities(ctx, req.(*GetFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetFacilityWrapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityWrapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetFacilityWrapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_facility_wrapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetFacilityWrapper(ctx, req.(*GetFacilityWrapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_CreateSubareaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubareaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateSubareaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_subarea_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateSubareaType(ctx, req.(*CreateSubareaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateSubareaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubareaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateSubareaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_subarea_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateSubareaType(ctx, req.(*UpdateSubareaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteSubareaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubareaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteSubareaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_subarea_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteSubareaType(ctx, req.(*DeleteSubareaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetSubareaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubareaTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetSubareaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_subarea_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetSubareaType(ctx, req.(*GetSubareaTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetSubareaTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubareaTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetSubareaTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_subarea_types",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetSubareaTypes(ctx, req.(*GetSubareaTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_CreateItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_item_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateItemType(ctx, req.(*CreateItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_item_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateItemType(ctx, req.(*UpdateItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_item_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteItemType(ctx, req.(*DeleteItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_item_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetItemType(ctx, req.(*GetItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetItemTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetItemTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_item_types",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetItemTypes(ctx, req.(*GetItemTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_CreateSubarea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubareaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateSubarea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_subarea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateSubarea(ctx, req.(*CreateSubareaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateSubarea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubareaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateSubarea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_subarea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateSubarea(ctx, req.(*UpdateSubareaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteSubarea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubareaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteSubarea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_subarea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteSubarea(ctx, req.(*DeleteSubareaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetSubarea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubareaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetSubarea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_subarea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetSubarea(ctx, req.(*GetSubareaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetSubareas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubareasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetSubareas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_subareas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetSubareas(ctx, req.(*GetSubareasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_products",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_CreateInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_inventory_item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateInventoryItem(ctx, req.(*CreateInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_inventory_item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateInventoryItem(ctx, req.(*UpdateInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_inventory_item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteInventoryItem(ctx, req.(*DeleteInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetInventoryItem(ctx, req.(*GetInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetInventoryItemsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryItemsByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetInventoryItemsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_items_by_product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetInventoryItemsByProduct(ctx, req.(*GetInventoryItemsByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetInventoryItemsBySubarea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryItemsBySubareaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetInventoryItemsBySubarea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_items_by_subarea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetInventoryItemsBySubarea(ctx, req.(*GetInventoryItemsBySubareaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetInventoryItemsByFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryItemsByFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetInventoryItemsByFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_inventory_items_by_facility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetInventoryItemsByFacility(ctx, req.(*GetInventoryItemsByFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_server_version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_CreateEntitySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntitySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).CreateEntitySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/create_entity_schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).CreateEntitySchema(ctx, req.(*CreateEntitySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_UpdateEntitySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntitySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).UpdateEntitySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/update_entity_schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).UpdateEntitySchema(ctx, req.(*UpdateEntitySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_DeleteEntitySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntitySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).DeleteEntitySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/delete_entity_schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).DeleteEntitySchema(ctx, req.(*DeleteEntitySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetEntitySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetEntitySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_entity_schema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetEntitySchema(ctx, req.(*GetEntitySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceInventory_GetEntitySchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitySchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceInventoryServer).GetEntitySchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.inventory.MServiceInventory/get_entity_schemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceInventoryServer).GetEntitySchemas(ctx, req.(*GetEntitySchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MServiceInventory_ServiceDesc is the grpc.ServiceDesc for MServiceInventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MServiceInventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.inventory.MServiceInventory",
	HandlerType: (*MServiceInventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_facility",
			Handler:    _MServiceInventory_CreateFacility_Handler,
		},
		{
			MethodName: "update_facility",
			Handler:    _MServiceInventory_UpdateFacility_Handler,
		},
		{
			MethodName: "delete_facility",
			Handler:    _MServiceInventory_DeleteFacility_Handler,
		},
		{
			MethodName: "get_facility",
			Handler:    _MServiceInventory_GetFacility_Handler,
		},
		{
			MethodName: "get_facilities",
			Handler:    _MServiceInventory_GetFacilities_Handler,
		},
		{
			MethodName: "get_facility_wrapper",
			Handler:    _MServiceInventory_GetFacilityWrapper_Handler,
		},
		{
			MethodName: "create_subarea_type",
			Handler:    _MServiceInventory_CreateSubareaType_Handler,
		},
		{
			MethodName: "update_subarea_type",
			Handler:    _MServiceInventory_UpdateSubareaType_Handler,
		},
		{
			MethodName: "delete_subarea_type",
			Handler:    _MServiceInventory_DeleteSubareaType_Handler,
		},
		{
			MethodName: "get_subarea_type",
			Handler:    _MServiceInventory_GetSubareaType_Handler,
		},
		{
			MethodName: "get_subarea_types",
			Handler:    _MServiceInventory_GetSubareaTypes_Handler,
		},
		{
			MethodName: "create_item_type",
			Handler:    _MServiceInventory_CreateItemType_Handler,
		},
		{
			MethodName: "update_item_type",
			Handler:    _MServiceInventory_UpdateItemType_Handler,
		},
		{
			MethodName: "delete_item_type",
			Handler:    _MServiceInventory_DeleteItemType_Handler,
		},
		{
			MethodName: "get_item_type",
			Handler:    _MServiceInventory_GetItemType_Handler,
		},
		{
			MethodName: "get_item_types",
			Handler:    _MServiceInventory_GetItemTypes_Handler,
		},
		{
			MethodName: "create_subarea",
			Handler:    _MServiceInventory_CreateSubarea_Handler,
		},
		{
			MethodName: "update_subarea",
			Handler:    _MServiceInventory_UpdateSubarea_Handler,
		},
		{
			MethodName: "delete_subarea",
			Handler:    _MServiceInventory_DeleteSubarea_Handler,
		},
		{
			MethodName: "get_subarea",
			Handler:    _MServiceInventory_GetSubarea_Handler,
		},
		{
			MethodName: "get_subareas",
			Handler:    _MServiceInventory_GetSubareas_Handler,
		},
		{
			MethodName: "create_product",
			Handler:    _MServiceInventory_CreateProduct_Handler,
		},
		{
			MethodName: "update_product",
			Handler:    _MServiceInventory_UpdateProduct_Handler,
		},
		{
			MethodName: "delete_product",
			Handler:    _MServiceInventory_DeleteProduct_Handler,
		},
		{
			MethodName: "get_product",
			Handler:    _MServiceInventory_GetProduct_Handler,
		},
		{
			MethodName: "get_products",
			Handler:    _MServiceInventory_GetProducts_Handler,
		},
		{
			MethodName: "create_inventory_item",
			Handler:    _MServiceInventory_CreateInventoryItem_Handler,
		},
		{
			MethodName: "update_inventory_item",
			Handler:    _MServiceInventory_UpdateInventoryItem_Handler,
		},
		{
			MethodName: "delete_inventory_item",
			Handler:    _MServiceInventory_DeleteInventoryItem_Handler,
		},
		{
			MethodName: "get_inventory_item",
			Handler:    _MServiceInventory_GetInventoryItem_Handler,
		},
		{
			MethodName: "get_inventory_items_by_product",
			Handler:    _MServiceInventory_GetInventoryItemsByProduct_Handler,
		},
		{
			MethodName: "get_inventory_items_by_subarea",
			Handler:    _MServiceInventory_GetInventoryItemsBySubarea_Handler,
		},
		{
			MethodName: "get_inventory_items_by_facility",
			Handler:    _MServiceInventory_GetInventoryItemsByFacility_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceInventory_GetServerVersion_Handler,
		},
		{
			MethodName: "create_entity_schema",
			Handler:    _MServiceInventory_CreateEntitySchema_Handler,
		},
		{
			MethodName: "update_entity_schema",
			Handler:    _MServiceInventory_UpdateEntitySchema_Handler,
		},
		{
			MethodName: "delete_entity_schema",
			Handler:    _MServiceInventory_DeleteEntitySchema_Handler,
		},
		{
			MethodName: "get_entity_schema",
			Handler:    _MServiceInventory_GetEntitySchema_Handler,
		},
		{
			MethodName: "get_entity_schemas",
			Handler:    _MServiceInventory_GetEntitySchemas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceInventory.proto",
}
